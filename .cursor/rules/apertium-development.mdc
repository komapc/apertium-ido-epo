---
description: Guidelines for Apertium development work
---

# Apertium Development Guidelines

## Project Structure

### Main Project: apertium-ido-epo

```
apertium-ido-epo/
├── apertium-ido.ido.dix          # Ido monolingual dictionary
├── apertium-epo.epo.dix          # Esperanto monolingual (if exists)
├── apertium-ido-epo.ido-epo.dix  # Bilingual dictionary
├── apertium-ido-epo.ido-epo.t1x  # Transfer rules (Ido→Esperanto)
├── apertium-ido-epo.epo-ido.t1x  # Transfer rules (Esperanto→Ido)
├── apertium-ido-epo.ido-epo.rlx  # Constraint Grammar (if exists)
├── modes.xml                      # Translation mode definitions
├── test/                          # Test suites
│   ├── test-ido-epo.txt          # Basic tests
│   ├── test-ido-epo-grammar.txt  # Grammar tests
│   └── *.json                    # Expected outputs
└── README.md
```

## Dictionary File Format (.dix)

### Structure
```xml
<dictionary>
  <alphabet>...</alphabet>
  <sdefs>...</sdefs>      <!-- Symbol definitions -->
  <pardefs>...</pardefs>  <!-- Paradigm definitions -->
  <section id="main" type="standard">
    <!-- Entries here, alphabetically sorted -->
    <e lm="lemma">
      <i>stem</i>
      <par n="paradigm__pos"/>
    </e>
  </section>
</dictionary>
```

### Important Rules
1. **Entries MUST be alphabetically sorted** (case-insensitive)
2. Stem + paradigm must correctly generate all word forms
3. For nouns ending in 'o': lemma="kato", stem="kat", paradigm="o__n"
4. For adjectives ending in 'a': lemma="bela", stem="bel", paradigm="a__adj"
5. For verbs ending in 'ar': lemma="vidar", stem="vid", paradigm="ar__vblex"

### Common Paradigms (Ido)
- `o__n` - Regular nouns (generates -o, -i, -on, -in)
- `a__adj` - Regular adjectives (generates -a, -e for adverb)
- `ar__vblex` - Regular verbs (generates -ar, -as, -is, -os, -us, -ez)
- `ala__adj` - Relational adjectives (generates -ala, -ale)
- `ajo__n` - Concrete thing nouns (generates -ajo, -aji, etc.)
- `__inv_n` - Invariable nouns (proper nouns, foreign words)
- `__pr` - Prepositions (invariable)
- `__cnjcoo` - Coordinating conjunctions
- `__cnjsub` - Subordinating conjunctions

## Transfer Rules (.t1x)

### Basic Structure
```xml
<transfer>
  <section-def-cats>
    <!-- Define categories matching dictionary tags -->
    <def-cat n="nom">
      <cat-item tags="n.*"/>
    </def-cat>
  </section-def-cats>
  
  <section-def-attrs>
    <!-- Define attributes to access -->
  </section-def-attrs>
  
  <section-def-vars>
    <!-- Define variables if needed -->
  </section-def-vars>
  
  <section-rules>
    <!-- Pattern matching and transformation rules -->
    <rule>
      <pattern>...</pattern>
      <action>...</action>
    </rule>
  </section-rules>
</transfer>
```

### Rule Ordering
- **More specific patterns BEFORE general patterns**
- Rules are tried in order from top to bottom
- First matching rule wins

### Testing Rules
```bash
# Validate XML syntax
xmllint --noout file.t1x

# Test transfer in isolation
apertium-transfer apertium-ido-epo.ido-epo.t1x \
  apertium-ido-epo.ido-epo.bin \
  apertium-ido-epo.autobil.bin

# Full pipeline test
echo "test" | apertium -d . ido-epo
```

## Development Workflow

### 1. Before Making Changes
```bash
# Pull latest changes
git pull origin main

# Create feature branch
git checkout -b feature/your-feature

# Ensure system builds
make clean && make
```

### 2. Making Dictionary Changes

**For adding entries:**
```bash
# 1. Edit dictionary
nano apertium-ido-epo/apertium-ido.ido.dix

# 2. Ensure alphabetical order (use sort script if available)
python3 sort_dictionary.py

# 3. Rebuild
make clean && make

# 4. Test
echo "test sentence" | apertium -d . ido-epo
```

**For fixing entries:**
- Verify lemma-stem-paradigm consistency
- Check for duplicates
- Ensure proper sorting

### 3. Making Transfer Rule Changes

```bash
# 1. Edit transfer file
nano apertium-ido-epo.ido-epo.t1x

# 2. Validate XML
xmllint --noout apertium-ido-epo.ido-epo.t1x

# 3. Rebuild (compiles .t1x to .bin)
make clean && make

# 4. Test specific patterns
echo "test sentence" | apertium -d . ido-epo

# 5. Run test suite
make test
```

### 4. Testing

```bash
# Run all tests
make test

# Add new test cases
# Edit test/test-ido-epo.txt (input)
# Edit test/test-ido-epo.txt.expected (expected output)

# Run specific test
bash test/run-tests.sh test-ido-epo
```

### 5. Committing Changes

```bash
# Stage files
git add apertium-ido-epo/apertium-ido.ido.dix

# Commit with descriptive message
git commit -m "Fix: correct 15 verb stems in Ido dictionary

- Fixed stem-lemma mismatches for -ar verbs
- Removed 3 duplicate entries
- Verified all paradigm assignments"

# Push to feature branch
git push origin feature/your-feature

# Create PR on GitHub (NEVER push to main directly)
```

## Common Issues & Solutions

### Issue: Translation shows `@` symbols
**Cause:** Ambiguous or unknown word forms  
**Solution:** 
1. Check if word exists in dictionary
2. Verify morphological analyzer recognizes the form
3. Check for paradigm conflicts

### Issue: Wrong case/number in output
**Cause:** Transfer rules not handling case correctly  
**Solution:**
1. Debug with `apertium -d . ido-epo-debug`
2. Check transfer rule pattern matching
3. Verify attribute preservation in rules

### Issue: Dictionary changes not taking effect
**Cause:** Binary files not recompiled  
**Solution:**
```bash
make clean
make
```

### Issue: Test failures after changes
**Cause:** Legitimate improvement or regression  
**Solution:**
1. Manually verify if new output is better
2. If better: update .expected file
3. If worse: fix the change
4. Document reasoning in commit message

## Performance Considerations

### Dictionary Size
- Current: ~6,667 entries (Ido monolingual)
- Target: ~10,000+ for good coverage
- Use paradigms to avoid listing every inflected form

### Transfer Rules
- ~50-100 rules is normal for basic system
- Complex systems may have 200-500 rules
- More specific rules = better quality but slower

### Build Time
- Full rebuild: ~30-60 seconds
- Incremental: ~10-20 seconds
- Use `make -j4` for parallel compilation

## Resources

- **Apertium Wiki:** https://wiki.apertium.org/
- **Transfer Rules Guide:** https://wiki.apertium.org/wiki/Transfer_rules
- **Dictionary Format:** https://wiki.apertium.org/wiki/Monodix
- **IRC:** #apertium on irc.oftc.net
- **Mailing List:** apertium-stuff@lists.sourceforge.net

## Quality Standards

### Before Committing
- ✅ Code compiles without errors
- ✅ All tests pass (or updated with justification)
- ✅ Dictionary entries are sorted
- ✅ XML is well-formed (xmllint passes)
- ✅ Changes are documented in commit message
- ✅ Manual testing shows improvement

### Code Review Checklist
- Clear, descriptive commit messages
- Changes focused on one logical improvement
- No debugging code left in
- Tests added/updated for new functionality
- Documentation updated if needed
