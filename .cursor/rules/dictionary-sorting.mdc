# Dictionary Sorting Rule

## CRITICAL: Always Sort Dictionaries Before Committing

**Rule:** All Apertium `.dix` dictionary files MUST be sorted alphabetically by lemma attribute before committing, unless explicitly stated otherwise by the user.

## Why Sorting Matters

1. **Diff clarity:** Sorted dictionaries produce clean, readable git diffs
2. **Merge conflicts:** Alphabetical order minimizes merge conflicts
3. **Maintainability:** Easy to find and locate entries
4. **Quality control:** Duplicates and inconsistencies are easier to spot
5. **Standard practice:** Apertium convention for all dictionary files

## How to Sort

### For Extractor Pipeline (Automatic)

The extractor's `export_apertium.py` script **automatically sorts** all exported dictionaries:
- Monodix entries sorted by lemma (case-insensitive)
- Bidix entries sorted by lemma (case-insensitive)

```bash
cd ido-esperanto-extractor
python3 scripts/export_apertium.py
# Output files are already sorted
```

### Standalone Sorting Script

For sorting existing `.dix` files without re-exporting:

```bash
cd ido-esperanto-extractor
python3 scripts/sort_dix.py /path/to/dictionary.dix -v
```

### Manual Sorting (Legacy)

The legacy `sort_dictionary.py` script in the apertium-dev root can sort dictionaries:

```bash
# Edit the script to point to your file
python3 /home/mark/apertium-dev/sort_dictionary.py
```

## Verification

To verify a dictionary is sorted:

```bash
# Extract lemmas and check order
xmllint --xpath '//section[@id="main"]/e/@lm' file.dix | \
  tr ' ' '\n' | sed 's/lm="//;s/"//' | \
  awk '{print tolower($0), NR, $0}' | \
  sort -k1,1 -k2,2n | \
  awk '{if (prev && prev > $1) print "NOT SORTED at line " $2 ": " prev " > " $1; prev=$1}'
```

## When to Skip Sorting

Only skip sorting if:
- User explicitly says "don't sort"
- Emergency hotfix where sorting would cause confusion
- Working with externally-maintained dictionary that has different conventions

**Default assumption:** Always sort unless told otherwise.

## Commit Checklist

Before committing any `.dix` file:
- [ ] Dictionary is sorted alphabetically
- [ ] Run `make test` to verify no breakage
- [ ] Check git diff for unexpected changes
- [ ] Commit message mentions sorting if that was the main change

## Integration with Git Workflow

This rule applies to all dictionary commits in:
- `apertium-ido/apertium-ido.ido.dix`
- `apertium-ido-epo/apertium-ido-epo.ido-epo.dix`
- `apertium-ido-epo/apertium-ido.ido.dix` (if present)
- `apertium-epo/apertium-epo.epo.dix` (if touched)
- Any other `.dix` files in the project

Remember: **Always create a PR** (never push to main) AND **always sort** (unless told not to).
